!function () { if ("undefined" == typeof digitalData) return; let t, e = digitalData.util, n = "isLoginTracked", i = "hasLoggedIn"; e.components.trackTBIDAuth = async function () { window.addEventListener("load", (function () { "true" === Util.getParam(i) && ("true" !== window.sessionStorage.getItem(n) && (digitalData.util.addBehavior("userLogin"), window.sessionStorage.setItem(n, "true")), window.history.replaceState({}, "", function () { let t = window.location.href, e = t.split("?"); if (e.length >= 2) { let t = encodeURIComponent(i) + "=", o = e[1].split(/[&;]/g); for (var n = o.length; n-- > 0;)-1 !== o[n].lastIndexOf(t, 0) && o.splice(n, 1); return e[0] + (o.length > 0 ? "?" + o.join("&") : "") } return t }())) })) }, async function () { let e = await async function () { let e = { company: "custom_attributes__CompanyName", id: "user_id", newRegistration: "newRegistration", orgID: "organization_id", role: "custom_attributes__Role" }, n = await function () { const t = window.location.origin; return new Promise(((e, n) => { import(t + "/c/public/redirect/auth.js").then((t => { t && t.default ? e(t) : n() })).catch((() => { n() })) })) }(); if (!n || !n.default) return {}; var i = null; try { i = await n.default.getUserInfo() } catch (t) { return } const o = t => { let e = {}; for (const n in t) if ("object" != typeof t[n] || Array.isArray(t[n])) e[n] = t[n]; else { const i = o(t[n]); for (const t in i) e[n + "__" + t] = i[t] } return e }; let r = o(i); return r = null != r ? r : {}, t = Object.keys(e).reduce((function (t, n) { let i; return t[n] = null !== (i = r[e[n]]) && void 0 !== i ? i : "", t }), {}), t }(); Util.isEmpty(e) || (digitalData.user[0].profile.tb = e) }(), e.components.trackTBIDAuth() }();